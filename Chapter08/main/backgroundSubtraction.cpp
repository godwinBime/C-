//
// Created by Godwin on 7/11/2022.
//
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/video/video.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <sstream>
#include <memory>

using namespace cv;
using namespace std;

int main__(int argc, char* argv[]){
    //Current frame
    Mat frame;

    //Foreground mask generated by MOG2 method
    Mat fgMaskMOG2;

    //MOG2 background subtractor
    Ptr<BackgroundSubtractor> pMOG2;

    char ch;

    /**
     * Create the capture object.
     * 0 -> input arg that specifies it should take
     * the input from the webcam**/
     VideoCapture cap(0);

     //if you cannot open the webcam, stop the execution
    if (!cap.isOpened()){
        cout<<"\n\nFailed to open webcam. Exiting...\n\n";
        return -1;
    } else{
        cout<<"\n\nSuccessfully opened the webcam...\n\n";
    }

    //Create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");

    //Create MOG2 Background Subtractor object
    pMOG2 = createBackgroundSubtractorMOG2();

    //Scaling factor to resize the input frames from the webcam
    float scalingFactor = 0.75;

    //Iterate until the user presses the 'Esc' key
    do {
        //Capture the current frame
        cap >> frame;

        //Resize the frame
        resize(frame, frame, Size(), scalingFactor, scalingFactor, INTER_AREA);

        //Update the MOG2 background model based on the current frame
        pMOG2->apply(frame, fgMaskMOG2);

        //Show the current frame
        imshow("Frame", frame);

        //Show the MOG2 foreground mask
        imshow("FG Mask MOG 2", fgMaskMOG2);

        /**
         * Get the keyboard input and check if it's 'Esc'.
         * 27 -> ASCII value for 'Esc' key**/
        ch = waitKey(30);
        if (ch == 27)
            break;
    } while (true);

    //Release the video capture object
    cap.release();

    //Close all windows
    destroyAllWindows();
    return 1;
}

